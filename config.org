#+TITLE: Emacs Configuration
* What is this?

  This literate file represents my current configuration of Emacs! I
  am using literate programming to make it easier to document the
  strange and arcane things that I sometimes have to do while learning
  more about Emacs. Hopefully this makes it easier to maintain and
  change in the future.

* Pre-configuration

  Before I actually configure anything interesting, I need to do
  certain things (like install use-package). In this section, do not
  assume that anything has been installed, but configure things that
  are generic (at least in theory) to any configuration of Emacs.

** package.el

   First up, I have to make sure that [[https://repo.or.cz/w/emacs.git/blob_plain/HEAD:/lisp/emacs-lisp/package.el][package.el]] is
   configured. Package.el is a package manager that's built into GNU
   Emacs (apparently since Emacs24). I will be using `use-package` for
   the most part, but I will have to bootstrap that somehow and for
   now package.el (which is built in anywhere I have needed it) fits
   fine.

   #+BEGIN_SRC emacs-lisp
     (require 'package)
   #+END_SRC 

*** Package repositories

    By default, my Emacs distribution uses [[http://elpa.gnu.org/][ELPA]] , but I also want to
    use [[https://melpa.org/][MELPA]], so I will include that here.  

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'package-archives
		   '("melpa" . "https://melpa.org/packages/") t)
    #+END_SRC
*** Initialization

    To set up `package.el` I need to call `package-initialize`.
    
    #+BEGIN_SRC emacs-lisp
      (package-initialize)
    #+END_SRC

** Use-package

   Now that package.el is set up, I can finally install and use
   `use-package`! [[https://github.com/jwiegley/use-package/tree/a7422fb8ab1baee19adb2717b5b47b9c3812a84c#use-package][Use-package]] is a crazy macro that does a lot of
   things but I am primarily using it to lazy-load things (using
   `package.el`) and to consolidate the list of plugins I am using
   with their configuration. I am also using the installation of
   `use-package` as an indicator that this is the first run. I don't
   want to refresh packages every time I start up Emacs, that would
   take forever, so I am refreshing them if use-package is not already
   installed. If it isn't, then clearly my config hasn't been run
   before, so we should refresh package contents before doing the
   initial setup.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

   Also, when we are compiling packages, we want to make sure that
   use-package has been loaded.

   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (require 'use-package))
   #+END_SRC
* Configuration
  
  This is where the meat-and-potatoes of my configuratoin will live.
** Variables

   In this section, I set global settings that are specific to native
   emacs, rather than to a particular package.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** Local configuration

   This file is set up only so that you can set any local variables
   you might need.  For example, if you are loading on Windows you
   might need to set some file paths to your org files that are
   different from the defaults I have checked in. If this file exists
   (and it should be ignored in the Git repo) then Emacs will tangle
   and execute it just like this file. If not, it will ignore and
   continue. 

   #+BEGIN_SRC emacs-lisp
     (setq local-file-path "~/.emacs.d/local.org")
     (if (file-exists-p local-file-path)
	 (org-babel-load-file local-file-path))
   #+END_SRC

** Packages
*** Evil-mode

    Evil mode is the vim emulation layer.  I am using use-package to
    install and enable it. 

**** Evil itself

     #+BEGIN_SRC emacs-lisp
       (use-package evil
	 :ensure t
	 :bind
	 (:map evil-normal-state-map
	       ("SPC SPC" . 'execute-extended-command)
	       ("SPC f s" . 'save-buffer)
	       ("SPC w h" . 'evil-window-left)
	       ("SPC w j" . 'evil-window-down)
	       ("SPC w k" . 'evil-window-up)
	       ("SPC w l" . 'evil-window-right)
	       ("SPC w s" . 'evil-window-split)
	       ("SPC w v" . 'evil-window-vsplit)
	       ("SPC w d" . 'evil-window-delete)
	       ("SPC b d" . 'kill-buffer)
	       ("SPC q f" . 'save-buffers-kill-terminal)
	       ("SPC h f" . 'describe-function)
	       ("SPC h v" . 'describe-variable)
	       ("SPC h k" . 'describe-key)
	       ("SPC h n" . 'view-emacs-news)
	       ("SPC h m" . 'view-order-manuals))
	 :init
	 (setq evil-want-keybinding nil)
	 (setq evil-want-C-u-scroll t)
	 :config
	 (evil-mode 1))
     #+END_SRC

**** Evil-collection

     We also want to use [[https://github.com/emacs-evil/evil-collection][`evil-collection`]] to set up things for
     "buffers evil mode doesn't think about by default"

     #+BEGIN_SRC emacs-lisp
       (use-package evil-collection
	 :after evil
	 :ensure t
	 :config
	 (evil-collection-init))
     #+END_SRC

**** Evil-surround

     Want to surround strings or expressions with things? This is how!

     #+BEGIN_SRC emacs-lisp
       (use-package evil-surround
	 :after evil
	 :ensure t
	 :config (global-evil-surround-mode))
     #+END_SRC

**** Evil-cleverparens

     [[https://github.com/luxbock/evil-cleverparens][This package]] is really helpful generally for writing Elisp. It
     has a bunch of features but it shold auto-close parens, and
     generally make evil mode actions aware of the syntax of lisp.

     #+BEGIN_SRC emacs-lisp
       (use-package evil-cleverparens
	 :after evil
	 :ensure t
	 :hook ( emacs-lisp-mode . evil-cleverparens-mode ))

     #+END_SRC
*** Solarized-theme

    The solarized theme I am using is from MELPA. 

    #+BEGIN_SRC emacs-lisp
      (use-package solarized-theme
	:ensure t
	:config
	(load-theme 'solarized-dark t))
    #+END_SRC

*** Which key mode

    Which key is a pannel at the bottom that should display options
    when a key is pressed.

    #+BEGIN_SRC emacs-lisp
      (use-package which-key
	:ensure t
	:config
	(which-key-mode))
    #+END_SRC
*** IDO-mode

    IDO mode is a completion engine. There are two other primary
    engines that people use: [[https://emacs-helm.github.io/helm/][Heml]] and [[https://github.com/abo-abo/swiper][Ivy]]. I'm not really sure what
    the advantages of either are, but Mastering Emacs suggests IDO. I
    have used Helm in Spacemacs before, so I may later switch to that.

    #+BEGIN_SRC emacs-lisp
      (use-package ido
	:ensure t
	:config
	(setq ido-enable-flex-matching t)
	(setq ido-everywhere t)
	(ido-mode 1)
	(setq ido-use-filename-at-point 'guess)
	:bind
	(:map evil-normal-state-map
	      ("SPC f f" . 'ido-find-file)
	      ("SPC b b" . 'ido-switch-buffer)))
    #+END_SRC
*** Magit

    I love [[https://magit.vc/][Magit]]. Enough said.

    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:ensure t
	:bind
	(:map evil-normal-state-map
	      ("SPC g s" . 'magit-status)))
    #+END_SRC
*** Org mode
    
**** Setting up variables

     #+BEGIN_SRC emacs-lisp
       (defun org-variables-config()
					
	 (defvar org-directory nil) ; Set this in your local.org file!

	 (setq todo-org "todo.org")
	 (setq professional-org "professional.org")
	 (setq personal-org "personal.org")
	 (setq school-org "school.org")
	 (setq notes-org "notes.org")
	 (setq inbox-org "inbox.org")
	 (setq project-org "project.org")
	 (setq reviews-org "reviews.org")
	 (setq meetings-org "meetings.org")
	 (setq interruption-org "interruption.org")
	 (setq reading-org "reading.org")
	 (setq contact-log-org "contact-log.org")
	 (setq one_on_one_topics-org "one-on-one-topics.org")

	 (setq org-files-list (list todo-org
				    professional-org
				    personal-org
				    school-org
				    notes-org
				    inbox-org
				    project-org
				    meetings-org
				    interruption-org
				    reading-org
				    contact-log-org))

	 (setq org-agenda-files (mapcar
				 (lambda (c)
				   (concat org-directory c))
				 org-files-list))
	 )
     #+END_SRC

**** Require package

    #+BEGIN_SRC emacs-lisp
      (use-package org
	:ensure t
	:config
	(org-variables-config)
	(evil-define-key 'normal org-mode-map (kbd "SPC m i l") 'org-insert-link)
	(evil-define-key 'normal org-mode-map (kbd "SPC m d s") 'org-schedule)
	(evil-define-key 'normal org-mode-map (kbd "SPC m d d") 'org-deadline)
	:bind
	(:map evil-normal-state-map
	      ("SPC a o a" . 'org-agenda)
	      ("SPC a o c" . 'org-capture)))
    #+END_SRC

**** evil-org

     #+BEGIN_SRC emacs-lisp
       (use-package evil-org
	 :ensure t
	 :after org
	 :hook (org-mode . (lambda () evil-org-mode))
	 :config
	 (require 'evil-org-agenda)
	 (evil-org-agenda-set-keys))
     #+END_SRC

**** Org bullets

     A really cool plugin that makes pretty bullets

     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
	 :after org
	 :ensure t
	 :config
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
     #+END_SRC
*** Editorconfig

    Editorconfig is a standard for keeping code editing settings in
    sync across tools and teams.  Someone can check in a .Editorconfig
    file at the root of a repo, and their editors should respect the
    settings. This should do that for me!

    #+BEGIN_SRC emacs-lisp
      (use-package editorconfig
	:ensure t
	:config
	(editorconfig-mode 1))
    #+END_SRC
*** Smartparens

    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
	:ensure t
	:hook ( emacs-lisp-mode . smartparens-mode))
    #+END_SRC
* Sources

  + [[https://masteringemacs.org/article/beginners-guide-to-emacs][Mastering Emacs Beginners Guide]]
