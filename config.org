#+TITLE: Emacs Configuration
* What is this?

  This literate file represents my current configuration of Emacs! I
  am using literate programming to make it easier to document the
  strange and arcane things that I sometimes have to do while learning
  more about Emacs. Hopefully this makes it easier to maintain and
  change in the future.

* Pre-configuration

  Before I actually configure anything interesting, I need to do
  certain things (like install use-package). In this section, do not
  assume that anything has been installed, but configure things that
  are generic (at least in theory) to any configuration of Emacs.

** package.el

   First up, I have to make sure that [[https://repo.or.cz/w/emacs.git/blob_plain/HEAD:/lisp/emacs-lisp/package.el][package.el]] is
   configured. Package.el is a package manager that's built into GNU
   Emacs (apparently since Emacs24). I will be using `use-package` for
   the most part, but I will have to bootstrap that somehow and for
   now package.el (which is built in anywhere I have needed it) fits
   fine.

   #+BEGIN_SRC emacs-lisp
     (require 'package)
   #+END_SRC 

*** Package repositories

    By default, my Emacs distribution uses [[http://elpa.gnu.org/][ELPA]] , but I also want to
    use [[https://melpa.org/][MELPA]], so I will include that here.  

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'package-archives
		   '("melpa" . "https://melpa.org/packages/") t)
    #+END_SRC
*** Initialization

    To set up `package.el` I need to call `package-initialize`.
    
    #+BEGIN_SRC emacs-lisp
      (package-initialize)
    #+END_SRC

** Use-package

   Now that package.el is set up, I can finally install and use
   `use-package`! [[https://github.com/jwiegley/use-package/tree/a7422fb8ab1baee19adb2717b5b47b9c3812a84c#use-package][Use-package]] is a crazy macro that does a lot of
   things but I am primarily using it to lazy-load things (using
   `package.el`) and to consolidate the list of plugins I am using
   with their configuration. I am also using the installation of
   `use-package` as an indicator that this is the first run. I don't
   want to refresh packages every time I start up Emacs, that would
   take forever, so I am refreshing them if use-package is not already
   installed. If it isn't, then clearly my config hasn't been run
   before, so we should refresh package contents before doing the
   initial setup.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

   Also, when we are compiling packages, we want to make sure that
   use-package has been loaded.

   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (require 'use-package))
   #+END_SRC
* Configuration

  This is where the meat-and-potatoes of my configuratoin will live.
  
** Packages
*** Evil-mode

    Evil mode is the vim emulation layer.  I am using use-package to
    install and enable it. 

    #+BEGIN_SRC emacs-lisp
      (use-package evil
	:ensure t
	:bind
	(:map evil-normal-state-map
	      ("SPC f f" . 'ido-find-file)
	      ("SPC f s" . 'save-buffer)
	      ("SPC w h" . 'evil-window-left)
	      ("SPC w j" . 'evil-window-down)
	      ("SPC w k" . 'evil-window-up)
	      ("SPC w l" . 'evil-window-right)
	      ("SPC w s" . 'evil-window-split)
	      ("SPC w v" . 'evil-window-vsplit)
	      ("SPC w d" . 'evil-window-delete)
	      ("SPC b d" . 'kill-buffer)
	      ("SPC q f" . 'save-buffers-kill-terminal))
	      :init
	      (setq evil-want-keybinding nil)
	      :config
	      (evil-mode 1))
    #+END_SRC

    We also want to use [[https://github.com/emacs-evil/evil-collection][`evil-collection`]] to set up things for
    "buffers evil mode doesn't think about by default"

    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
	:after evil
	:ensure t
	:config
	(evil-collection-init))
    #+END_SRC

*** Which key mode

    Which key is a pannel at the bottom that should display options
    when a key is pressed.

    #+BEGIN_SRC emacs-lisp
      (use-package which-key
	:ensure t
	:config
	(which-key-mode))
    #+END_SRC
*** IDO-mode

    IDO mode is a completion engine. There are two other primary
    engines that people use: [[https://emacs-helm.github.io/helm/][Heml]] and [[https://github.com/abo-abo/swiper][Ivy]]. I'm not really sure what
    the advantages of either are, but Mastering Emacs suggests IDO. I
    have used Helm in Spacemacs before, so I may later switch to that.

    #+BEGIN_SRC emacs-lisp
      (use-package ido
	:ensure t
	:config
	(setq ido-enable-flex-matching t)
	(setq ido-everywhere t)
	(ido-mode 1)
	(setq ido-use-filename-at-point 'guess))
    #+END_SRC
*** Magit

    I love [[https://magit.vc/][Magit]]. Enough said.

    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:ensure t
	:bind
	(:map evil-normal-state-map
	      ("SPC g s" . 'magit-status)))
    #+END_SRC

* Sources

  + [[https://masteringemacs.org/article/beginners-guide-to-emacs][Mastering Emacs Beginners Guide]]
